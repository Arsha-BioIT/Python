import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# ✅ Improved Dataset
data = {
    'Feature': np.linspace(1, 50, 50),  
    'Target': np.linspace(10, 500, 50) + np.random.normal(0, 20, 50)  
}
df = pd.DataFrame(data)

# ✅ Feature Scaling
scaler = StandardScaler()
X = scaler.fit_transform(df[['Feature']])
y = df['Target']

# ✅ Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ✅ Decision Tree Regressor with Depth Limit
model = DecisionTreeRegressor(max_depth=4, random_state=42)
model.fit(X_train, y_train)

# ✅ Predictions
y_pred = model.predict(X_test)

# ✅ Model Evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R2 Score: {r2}")

# ✅ Visualization
X_grid = np.linspace(min(X), max(X), 100).reshape(-1, 1)
y_grid_pred = model.predict(X_grid)

plt.scatter(X, y, color='red', label='Actual Data')
plt.plot(X_grid, y_grid_pred, color='blue', label='Prediction')
plt.title('Optimized Decision Tree Regression')
plt.xlabel('Feature (Standardized)')
plt.ylabel('Target')
plt.legend()
plt.show()
